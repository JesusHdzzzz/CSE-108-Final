{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport './loginPage.css';\nconst LoginPage = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const handleLogin = async e => {\n    e.preventDefault();\n    if (!email || !password) {\n      alert('Please enter both email and password');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert('Login successful!');\n        // You might store user info/token here\n        // localStorage.setItem('user', JSON.stringify(data.user));\n        navigate('/dashboard'); // or another route after login\n      } else {\n        alert(data.error || 'Login failed');\n      }\n    } catch (err) {\n      console.error('Login error:', err);\n      alert('Server error');\n    }\n  };\n};\n_s(LoginPage, \"TSZhDBNy8CmbxXgprY/vvMmTG1Q=\");\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","Link","useNavigate","LoginPage","_s","email","setEmail","password","setPassword","handleLogin","e","preventDefault","alert","response","fetch","method","headers","body","JSON","stringify","data","json","ok","navigate","error","err","console","_c","$RefreshReg$"],"sources":["C:/Users/User/CSE-108-Final/Frontend/my-app/src/pages/loginPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './loginPage.css';\r\n\r\nconst LoginPage = () => {\r\n  const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!email || !password) {\r\n      alert('Please enter both email and password');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        alert('Login successful!');\r\n        // You might store user info/token here\r\n        // localStorage.setItem('user', JSON.stringify(data.user));\r\n        navigate('/dashboard'); // or another route after login\r\n      } else {\r\n        alert(data.error || 'Login failed');\r\n      }\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      alert('Server error');\r\n    }\r\n  };\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,iBAAiB;AAExB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,WAAW,GAAG,MAAOC,CAAC,IAAK;IACjCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAACN,KAAK,IAAI,CAACE,QAAQ,EAAE;MACvBK,KAAK,CAAC,sCAAsC,CAAC;MAC7C;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEd,KAAK;UAAEE;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMa,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACfV,KAAK,CAAC,mBAAmB,CAAC;QAC1B;QACA;QACAW,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLX,KAAK,CAACQ,IAAI,CAACI,KAAK,IAAI,cAAc,CAAC;MACrC;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACF,KAAK,CAAC,cAAc,EAAEC,GAAG,CAAC;MAClCb,KAAK,CAAC,cAAc,CAAC;IACvB;EACF,CAAC;AACH,CAAC;AAACR,EAAA,CApCID,SAAS;AAAAwB,EAAA,GAATxB,SAAS;AAsCf,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}